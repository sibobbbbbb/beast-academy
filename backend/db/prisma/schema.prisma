generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model member_user {
  u_id    Int
  m_id    Int
  members members @relation(fields: [m_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users   @relation(fields: [u_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([u_id, m_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model members {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(100)
  img_url       String        @default("")
  phone_no      String?       @unique @db.VarChar(15)
  email         String        @unique @db.VarChar(100)
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  last_activity DateTime?     @default(now()) @db.Timestamp(6)
  stat1         Int?
  stat2         Int?
  stat3         Int?
  stat4         Int?
  stat5         Int?
  member_user   member_user[]
}

model users {
  id          Int           @id @default(autoincrement())
  role        user_role
  username    String        @db.VarChar(100)
  password    String        @db.VarChar(255)
  email       String        @unique @db.VarChar(100)
  member_user member_user[]
}

model events {
  id          Int       @id @default(autoincrement())
  title       String    @default("Event Title") @db.VarChar(50)
  images      String    @default("")
  description String?   @default("Description here") @db.VarChar(200)
  posted_at   DateTime? @default(now()) @db.Timestamp(6)
}

enum user_role {
  admin
  trainer
  member
}
