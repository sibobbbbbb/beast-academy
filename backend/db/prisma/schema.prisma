generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_role {
  admin
  trainer
  member
}

model users {
  id            Int       @id @default(autoincrement())
  role          user_role
  username      String    @db.VarChar(100)
  password      String?   @db.VarChar(255)
  email         String    @unique @db.VarChar(100)
  provider      String?   @db.VarChar(20)
  provider_id   String?   @db.VarChar(100)
  avatar        String    // sesuai dengan default di DB (TEXT NOT NULL DEFAULT '')
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  name          String?   @db.VarChar(100)
  phone_no      String?   @unique @db.VarChar(15)
  last_activity DateTime? @default(now()) @db.Timestamp(6)

  // Jika tidak ada tabel member_user, relasi ini bisa dihapus atau dibiarkan terpisah
  member       members?      @relation("UserMember")
}

model members {
  // Primary key sesuai DB: id_m SERIAL PRIMARY KEY
  id_m        Int   @id @default(autoincrement())
  // id_u adalah foreign key ke users(id) dan harus UNIQUE
  id_u        Int   @unique
  stat1       Int?  // CHECK (stat1 BETWEEN 1 AND 100)
  stat2       Int?  // CHECK (stat2 BETWEEN 1 AND 100)
  stat3       Int?  // CHECK (stat3 BETWEEN 1 AND 100)
  stat4       Int?  // CHECK (stat4 BETWEEN 1 AND 100)
  stat5       Int?  // CHECK (stat5 BETWEEN 1 AND 100)
  
  // Relasi ke users
  user        users @relation("UserMember", fields: [id_u], references: [id], onDelete: Cascade)
}

model events {
  id          Int       @id @default(autoincrement())
  title       String    @default("Event Title") @db.VarChar(50)
  images      String    @default("")
  description String?   @default("Description here") @db.VarChar(200)
  posted_at   DateTime? @default(now()) @db.Timestamp(6)
  joinform    String    @default("https://example.com/join-form") @db.VarChar(200)
}

model liked_by {
  id   Int @id @default(autoincrement())
  u_id Int       
  e_id Int
}