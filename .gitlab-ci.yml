stages:
  - lint
  - test
  - build
  - deploy

lint:
  tags:
    - runner-beast
  image: node:20
  stage: lint
  before_script:
    - cd frontend; if (-not $?) { exit 1 }
    - npm install  
  script:
    - npm run lint
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

test:
  tags:
    - runner-beast
  image: node:20
  stage: test
  before_script:
    - cd backend; if (-not $?) { exit 1 }  
    - npm install  
    - npx prisma generate --schema=./db/prisma/schema.prisma
  script:
    - npm run test
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

build:
  tags:
    - runner-beast
  image: node:20
  stage: build
  before_script:
    - cd frontend; if (-not $?) { exit 1 }  
    - npm install 
  script:
    - npm run build
  artifacts:
    paths:
      - frontend/dist
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

deploy:
  tags:
    - runner-beast
  stage: deploy
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    # Configure Git (Windows PowerShell commands)
    - git config --global user.name "$env:GITLAB_USER_NAME"
    - git config --global user.email "$env:GITLAB_USER_EMAIL"
    # Setup SSH for Windows
    - mkdir -Force "$env:USERPROFILE\.ssh"
    - Set-Content -Path "$env:USERPROFILE\.ssh\id_rsa" -Value "$env:GITHUB_SSH_PRIVATE_KEY"
    # Adjust permissions for SSH key (Windows equivalent of chmod 600)
    - $acl = Get-Acl "$env:USERPROFILE\.ssh\id_rsa"
    - $acl.SetAccessRuleProtection($true, $false)
    - $rule = New-Object System.Security.AccessControl.FileSystemAccessRule("$env:USERNAME", "Read, Write", "Allow")
    - $acl.SetAccessRule($rule)
    - Set-Acl "$env:USERPROFILE\.ssh\id_rsa" $acl
    # Add GitHub to known hosts
    - ssh-keyscan github.com | Out-File -Append -FilePath "$env:USERPROFILE\.ssh\known_hosts" -Encoding ASCII
  script:
    # Prepare temporary directory for operation
    - $tempDir = "$env:TEMP\github_sync"
    - if (Test-Path $tempDir) { Remove-Item -Recurse -Force $tempDir }
    - mkdir -Force $tempDir
    - cd $tempDir
    # Clone GitHub repository using SSH
    - git clone "git@github.com:$env:GITHUB_USERNAME/$env:GITHUB_REPO.git" github_repo
    # Get GitLab repository content
    - $gitlabDir = "$env:CI_PROJECT_DIR"
    # Clear GitHub repo content except .git directory
    - Get-ChildItem -Path ".\github_repo" -Exclude .git | Remove-Item -Recurse -Force
    # Copy all content from GitLab project to GitHub repo directory
    - Copy-Item -Path "$gitlabDir\*" -Destination ".\github_repo\" -Recurse -Force -Exclude @("github_repo", ".git")
    # Navigate to GitHub repo directory and commit changes
    - cd github_repo
    # Remove GitLab CI file (optional)
    - if (Test-Path .gitlab-ci.yml) { Remove-Item -Force .gitlab-ci.yml }
    # Commit and push to GitHub
    - git add .
    - 'git commit -m "Auto-sync from GitLab CI"'
    - 'if ($LASTEXITCODE -eq 0) { git push origin main } else { Write-Host "No changes to commit" }'
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'